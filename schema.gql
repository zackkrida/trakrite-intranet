"""All input for the `assignJobs` mutation."""
input AssignJobsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  jobs: [UUID]!
  userId: UUID!
}

"""The output of our `assignJobs` mutation."""
type AssignJobsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jobs: [Job!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the create `Job` mutation."""
input CreateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Job` to be created by this mutation."""
  job: JobInput!
}

"""The output of our create `Job` mutation."""
type CreateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was created by this mutation."""
  job: Job

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Job`."""
  user: User
}

"""All input for the create `Mile` mutation."""
input CreateMileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mile` to be created by this mutation."""
  mile: MileInput!
}

"""The output of our create `Mile` mutation."""
type CreateMilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mile` that was created by this mutation."""
  mile: Mile

  """An edge for our `Mile`. May be used by Relay 1."""
  mileEdge(
    """The method to use when ordering `Mile`."""
    orderBy: [MilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Mile`."""
  user: User
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteJob` mutation."""
input DeleteJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Job` mutation."""
type DeleteJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedJobNodeId: ID

  """The `Job` that was deleted by this mutation."""
  job: Job

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Job`."""
  user: User
}

"""All input for the `deleteMile` mutation."""
input DeleteMileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Mile` mutation."""
type DeleteMilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMileNodeId: ID

  """The `Mile` that was deleted by this mutation."""
  mile: Mile

  """An edge for our `Mile`. May be used by Relay 1."""
  mileEdge(
    """The method to use when ordering `Mile`."""
    orderBy: [MilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Mile`."""
  user: User
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

type Job {
  createdAt: Datetime
  customerAddress: String
  customerEmail: String
  customerName: String
  customerPhone: String
  id: UUID!
  jobAddress: String
  name: String
  notes: String
  paymentStatus: PayStatus!
  progress: String
  recievedOn: Datetime!
  updatedAt: Datetime

  """Reads a single `User` that is related to this `Job`."""
  user: User
  userId: UUID
}

"""
A condition to be used against `Job` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input JobCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `customerAddress` field."""
  customerAddress: String

  """Checks for equality with the object’s `customerEmail` field."""
  customerEmail: String

  """Checks for equality with the object’s `customerName` field."""
  customerName: String

  """Checks for equality with the object’s `customerPhone` field."""
  customerPhone: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `jobAddress` field."""
  jobAddress: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `notes` field."""
  notes: String

  """Checks for equality with the object’s `paymentStatus` field."""
  paymentStatus: PayStatus

  """Checks for equality with the object’s `progress` field."""
  progress: String

  """Checks for equality with the object’s `recievedOn` field."""
  recievedOn: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `Job` object types. All fields are combined with a logical ‘and.’
"""
input JobFilter {
  """Checks for all expressions in this list."""
  and: [JobFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `customerAddress` field."""
  customerAddress: StringFilter

  """Filter by the object’s `customerEmail` field."""
  customerEmail: StringFilter

  """Filter by the object’s `customerName` field."""
  customerName: StringFilter

  """Filter by the object’s `customerPhone` field."""
  customerPhone: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `jobAddress` field."""
  jobAddress: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: JobFilter

  """Filter by the object’s `notes` field."""
  notes: StringFilter

  """Checks for any expressions in this list."""
  or: [JobFilter!]

  """Filter by the object’s `paymentStatus` field."""
  paymentStatus: PayStatusFilter

  """Filter by the object’s `progress` field."""
  progress: StringFilter

  """Filter by the object’s `recievedOn` field."""
  recievedOn: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """A related `user` exists."""
  userExists: Boolean

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `Job`"""
input JobInput {
  createdAt: Datetime
  customerAddress: String
  customerEmail: String
  customerName: String
  customerPhone: String
  id: UUID
  jobAddress: String
  name: String
  notes: String
  paymentStatus: PayStatus
  progress: String
  recievedOn: Datetime
  updatedAt: Datetime
  userId: UUID
}

"""Represents an update to a `Job`. Fields that are set will be updated."""
input JobPatch {
  createdAt: Datetime
  customerAddress: String
  customerEmail: String
  customerName: String
  customerPhone: String
  id: UUID
  jobAddress: String
  name: String
  notes: String
  paymentStatus: PayStatus
  progress: String
  recievedOn: Datetime
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `Job` values."""
type JobsConnection {
  """
  A list of edges which contains the `Job` and cursor to aid in pagination.
  """
  edges: [JobsEdge!]!

  """A list of `Job` objects."""
  nodes: [Job!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Job` you could get from the connection."""
  totalCount: Int!
}

"""A `Job` edge in the connection."""
type JobsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Job` at the end of the edge."""
  node: Job!
}

"""Methods to use when ordering `Job`."""
enum JobsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CUSTOMER_ADDRESS_ASC
  CUSTOMER_ADDRESS_DESC
  CUSTOMER_EMAIL_ASC
  CUSTOMER_EMAIL_DESC
  CUSTOMER_NAME_ASC
  CUSTOMER_NAME_DESC
  CUSTOMER_PHONE_ASC
  CUSTOMER_PHONE_DESC
  ID_ASC
  ID_DESC
  JOB_ADDRESS_ASC
  JOB_ADDRESS_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  NOTES_ASC
  NOTES_DESC
  PAYMENT_STATUS_ASC
  PAYMENT_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROGRESS_ASC
  PROGRESS_DESC
  RECIEVED_ON_ASC
  RECIEVED_ON_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

type Mile {
  createdAt: Datetime
  date: Datetime!
  distance: Int!
  id: UUID!
  info: String!
  updatedAt: Datetime

  """Reads a single `User` that is related to this `Mile`."""
  user: User
  userId: UUID
}

"""
A condition to be used against `Mile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MileCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `date` field."""
  date: Datetime

  """Checks for equality with the object’s `distance` field."""
  distance: Int

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `info` field."""
  info: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `Mile` object types. All fields are combined with a logical ‘and.’
"""
input MileFilter {
  """Checks for all expressions in this list."""
  and: [MileFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `date` field."""
  date: DatetimeFilter

  """Filter by the object’s `distance` field."""
  distance: IntFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `info` field."""
  info: StringFilter

  """Negates the expression."""
  not: MileFilter

  """Checks for any expressions in this list."""
  or: [MileFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """A related `user` exists."""
  userExists: Boolean

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `Mile`"""
input MileInput {
  createdAt: Datetime
  date: Datetime
  distance: Int!
  id: UUID
  info: String!
  updatedAt: Datetime
  userId: UUID
}

"""Represents an update to a `Mile`. Fields that are set will be updated."""
input MilePatch {
  createdAt: Datetime
  date: Datetime
  distance: Int
  id: UUID
  info: String
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `Mile` values."""
type MilesConnection {
  """
  A list of edges which contains the `Mile` and cursor to aid in pagination.
  """
  edges: [MilesEdge!]!

  """A list of `Mile` objects."""
  nodes: [Mile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mile` you could get from the connection."""
  totalCount: Int!
}

"""A `Mile` edge in the connection."""
type MilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mile` at the end of the edge."""
  node: Mile!
}

"""Methods to use when ordering `Mile`."""
enum MilesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DATE_ASC
  DATE_DESC
  DISTANCE_ASC
  DISTANCE_DESC
  ID_ASC
  ID_DESC
  INFO_ASC
  INFO_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  assignJobs(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AssignJobsInput!
  ): AssignJobsPayload

  """
  Creates a JWT token that will securely identify a user and give them certain permissions.
  """
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload

  """Creates a single `Job`."""
  createJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJobInput!
  ): CreateJobPayload

  """Creates a single `Mile`."""
  createMile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMileInput!
  ): CreateMilePayload

  """Deletes a single `Job` using a unique key."""
  deleteJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobInput!
  ): DeleteJobPayload

  """Deletes a single `Mile` using a unique key."""
  deleteMile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMileInput!
  ): DeleteMilePayload

  """Registers a single user and creates an account in our app."""
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  unassignJobs(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UnassignJobsInput!
  ): UnassignJobsPayload
  updateCurrentPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCurrentPasswordInput!
  ): UpdateCurrentPasswordPayload

  """Updates a single `Job` using a unique key and a patch."""
  updateJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobInput!
  ): UpdateJobPayload

  """Updates a single `Mile` using a unique key and a patch."""
  updateMile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMileInput!
  ): UpdateMilePayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum PayStatus {
  CANCELLED
  INVOICED
  PAID
  PENDING
  WAITING
}

"""
A filter to be used against PayStatus fields. All fields are combined with a logical ‘and.’
"""
input PayStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PayStatus

  """Equal to the specified value."""
  equalTo: PayStatus

  """Greater than the specified value."""
  greaterThan: PayStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PayStatus

  """Included in the specified list."""
  in: [PayStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: PayStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PayStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PayStatus

  """Not equal to the specified value."""
  notEqualTo: PayStatus

  """Not included in the specified list."""
  notIn: [PayStatus!]
}

"""The root query type which gives access points into the data universe."""
type Query {
  """Gets the user who was identified by our JWT."""
  currentUser: User
  job(id: UUID!): Job

  """Reads and enables pagination through a set of `Job`."""
  jobs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsConnection
  mile(id: UUID!): Mile

  """Reads and enables pagination through a set of `Mile`."""
  miles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mile`."""
    orderBy: [MilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  user(id: UUID!): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  jobTitle: String!
  lastName: String!
  password: String!
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Included in the specified list."""
  in: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not included in the specified list."""
  notIn: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""All input for the `unassignJobs` mutation."""
input UnassignJobsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  jobs: [UUID]!
}

"""The output of our `unassignJobs` mutation."""
type UnassignJobsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jobs: [Job!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCurrentPassword` mutation."""
input UpdateCurrentPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  password: String!
}

"""The output of our `updateCurrentPassword` mutation."""
type UpdateCurrentPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `updateJob` mutation."""
input UpdateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  patch: JobPatch!
}

"""The output of our update `Job` mutation."""
type UpdateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was updated by this mutation."""
  job: Job

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Job`."""
  user: User
}

"""All input for the `updateMile` mutation."""
input UpdateMileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Mile` being updated.
  """
  patch: MilePatch!
}

"""The output of our update `Mile` mutation."""
type UpdateMilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mile` that was updated by this mutation."""
  mile: Mile

  """An edge for our `Mile`. May be used by Relay 1."""
  mileEdge(
    """The method to use when ordering `Mile`."""
    orderBy: [MilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Mile`."""
  user: User
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User {
  """The time this user was created."""
  createdAt: Datetime

  """The users first name."""
  firstName: String!

  """
  A persons full name which is a concatenation of their first and last name.
  """
  fullName: String

  """The primary unique identifier for the user."""
  id: UUID!

  """A boolean for admin status"""
  isAdmin: Boolean

  """Reads and enables pagination through a set of `Job`."""
  jobs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsConnection!

  """A short description about the user."""
  jobTitle: String

  """The users last name."""
  lastName: String

  """Reads and enables pagination through a set of `Mile`."""
  miles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mile`."""
    orderBy: [MilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilesConnection!
  updatedAt: Datetime
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `jobTitle` field."""
  jobTitle: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Filter by the object’s `jobs` relation."""
  jobs: UserToManyJobFilter

  """Some related `jobs` exist."""
  jobsExist: Boolean

  """Filter by the object’s `jobTitle` field."""
  jobTitle: StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `miles` relation."""
  miles: UserToManyMileFilter

  """Some related `miles` exist."""
  milesExist: Boolean

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """The time this user was created."""
  createdAt: Datetime

  """The users first name."""
  firstName: String

  """The primary unique identifier for the user."""
  id: UUID

  """A boolean for admin status"""
  isAdmin: Boolean

  """A short description about the user."""
  jobTitle: String

  """The users last name."""
  lastName: String
  updatedAt: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  JOB_TITLE_ASC
  JOB_TITLE_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `Job` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyJobFilter {
  """
  Every related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JobFilter

  """
  No related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JobFilter

  """
  Some related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JobFilter
}

"""
A filter to be used against many `Mile` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMileFilter {
  """
  Every related `Mile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MileFilter

  """
  No related `Mile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MileFilter

  """
  Some related `Mile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MileFilter
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}
